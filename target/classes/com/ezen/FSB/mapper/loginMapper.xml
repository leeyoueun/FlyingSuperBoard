<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
 
<mapper namespace="com.ezen.FSB.mapper.loginMapper">  <!-- name스페이스 - 자기이름 / 경로랑 같이 /마이바티스 의무적으로 적어야함, 네임스페이스가뭘하냐면
													자바에는 없던 문법 /  -->

 <select id="findMember" parameterType="String" resultType="MemberDTO">
 	select * from f_member where mem_id = #{id}
 </select> 
 
 <select id="findId" parameterType="String" resultType="MemberDTO">
 	select * from f_member where mem_name = #{name}
 </select>
 
 <select id="findIdnum" parameterType="String" resultType="MemberDTO">
 	select * from f_member where mem_num = #{num}
 </select>
 
  <select id="findNick" parameterType="String" resultType="MemberDTO">
 	select * from f_member where mem_nickname = #{nickname}
 </select>
 
 <select id="findNumber" parameterType="String" resultType="MemberDTO">
 	select * from f_member where mem_name = #{name}
 </select>
 
 <select id="idMember" parameterType="String" resultType="MemberDTO">
 	select * from f_member where mem_id = #{id}
 </select> 
 
 <select id="loginMember" parameterType="String" resultType="String">
 	select mem_passwd from f_member where mem_id = #{id}
 </select>
 
  <select id="joinMember" parameterType="String" resultType="String">
 	select mem_join from f_member where mem_id = #{id}
 </select>
 
 <update id="changePw" parameterType="MemberDTO">
      update f_member set mem_passwd = #{mem_passwd} where mem_id = #{mem_id}
   </update>
   
   <update id="changeNick" parameterType="MemberDTO">
      update f_member set mem_nickname = #{mem_nickname} where mem_id = #{mem_id}
   </update>
   
   <update id="changePhone" parameterType="MemberDTO">
      update f_member set mem_hp1 = #{mem_hp1}, mem_hp2 = #{mem_hp2}, mem_hp3 = #{mem_hp3}  where mem_id = #{mem_id}
   </update>
   
   <update id="changeMsg" parameterType="MemberDTO">
      update f_member set mem_msg = #{mem_msg}  where mem_id = #{mem_id}
   </update>
   
   <update id="changeTag" parameterType="MemberDTO">
      update f_member set tag_1 = #{tag_1}, tag_2 = #{tag_2}, tag_3 = #{tag_3}, tag_4 = #{tag_4}, tag_5 = #{tag_5}, tag_6 = #{tag_6}, tag_7 = #{tag_7}, tag_8 = #{tag_8}  where mem_id = #{mem_id}
   </update>
   
   <update id="changeBadge" parameterType="MemberDTO">
      update f_member set badge_king = #{badge_king}, badge_write = #{badge_write}, badge_1004 = #{badge_1004}, badge_good = #{badge_good}, badge_rich = #{badge_rich} where mem_id = #{mem_id}
      
   </update>
   
   <update id="changeBadgeOk" parameterType="MemberDTO">
      update f_member set badge_king_2 = #{badge_king_2}, badge_write_2 = #{badge_write_2}, badge_1004_2 = #{badge_1004_2}, badge_good_2 = #{badge_good_2}, badge_rich_2 = #{badge_rich_2} where mem_id = #{mem_id}
      
   </update>
   
      <update id="plusCount" parameterType="MemberDTO">
     update f_member set mem_count = mem_count+1 where mem_id = #{mem_id}
   </update>
   
   <update id="agreeUpdate" parameterType="MemberDTO">
      update f_member set mem_sel_agree = #{mem_sel_agree} where mem_id = #{mem_id}
   </update>
   
    <update id="imageUpdate" parameterType="MemberDTO">
      update f_member set mem_img = #{mem_img} where mem_id = #{mem_id}
   </update>
   
    <insert id="insertMember2" parameterType="MemberDTO">
 	insert into f_member(mem_num, mem_name, mem_id, mem_passwd, mem_mode, mem_join, mem_regdate, mem_nickname, mem_count, badge_king, badge_write, badge_1004, badge_good, badge_rich, badge_king_2, badge_write_2, badge_1004_2, badge_good_2, badge_rich_2, tag_1, tag_2, tag_3, tag_4, tag_5, tag_6, tag_7, tag_8) 
 	values(#{mem_num}, #{mem_name}, #{mem_id}, #{mem_passwd}, #{mem_mode}, #{mem_join}, sysdate, #{mem_nickname}, #{mem_count} , #{badge_king} , #{badge_write}, #{badge_1004}, #{badge_good}, #{badge_rich}, #{badge_king_2}, #{badge_write_2}, #{badge_1004_2}, #{badge_good_2}, #{badge_rich_2}, #{tag_1}, #{tag_2}, #{tag_3}, #{tag_4}, #{tag_5}, #{tag_6}, #{tag_7}, #{tag_8})
 </insert> 
 
<insert id="insertKakaoMember" parameterType="MemberDTO">
 	insert into f_member(mem_num, mem_name, mem_id, mem_mode, mem_join, mem_regdate, mem_count, badge_king, badge_write, badge_1004, badge_good, badge_rich, badge_king_2, badge_write_2, badge_1004_2, badge_good_2, badge_rich_2, tag_1, tag_2, tag_3, tag_4, tag_5, tag_6, tag_7, tag_8, mem_report) 
 	values(#{mem_num}, #{mem_name}, #{mem_id}, #{mem_mode}, #{mem_join}, sysdate, #{mem_count}, #{badge_king} , #{badge_write}, #{badge_1004}, #{badge_good}, #{badge_rich}, #{badge_king_2}, #{badge_write_2}, #{badge_1004_2}, #{badge_good_2}, #{badge_rich_2}, #{tag_1}, #{tag_2}, #{tag_3}, #{tag_4}, #{tag_5}, #{tag_6}, #{tag_7}, #{tag_8}, #{mem_report})
 </insert> 		
 
 <!-- 뱃지!!! -->
 	<select id="memCountLike" resultType="int">
		select count(*) from f_game_like where mem_num = #{num}
	</select>
	
	<select id="memCountShop" resultType="int">
		select count(*) from f_order where mem_num = #{num}
	</select>
 
 <!-- 자유게시판 글목록 개수 -->
	<select id="memCountBoard" resultType="int">
		select count(*) from f_board where mem_num = #{num}
	</select>
	
	<select id="memCountShBoard" resultType="int">
		select count(*) from f_sh_board where mem_num = #{num}
	</select>
	
	<select id="memCountFreeBoard" resultType="int">
		select count(*) from f_board where board_anony_check =0 and mem_num = #{num}
	</select>
	
		<select id="memCountSecretBoard" resultType="int">
		select count(*) from f_board where board_anony_check =1 and mem_num = #{num}
	</select>
	
	<!-- 댓글 -->
	<select id="memCountReply" resultType="int">
		select count(*) from f_board_reply where mem_num=#{num}
	</select>
	
	<select id="MemfreelistBoard" parameterType="map" resultType="boardDTO">
		 select b.*, m.mem_nickname from (select rownum rn, A.* from 
		 (select * from f_board where board_anony_check=0 order by board_re_group desc, board_re_step asc)A) b 
		 left join f_member m on b.mem_num = m.mem_num where b.mem_num=#{num} and rn between #{start} and #{end}
	</select>
	
	<select id="MemShlistBoard" parameterType="map" resultType="boardDTO">
		 select b.*, m.mem_nickname from (select rownum rn, A.* from 
		 (select * from f_sh_board order by board_re_group desc, board_re_step asc)A) b 
		 left join f_member m on b.mem_num = m.mem_num where b.mem_num=#{num} and rn between #{start} and #{end}
	</select>
	
	<select id="MemSecretlistBoard" parameterType="map" resultType="boardDTO">
		 select b.*, m.mem_nickname from (select rownum rn, A.* from 
		 (select * from f_board where board_anony_check=1 order by board_re_group desc, board_re_step asc)A) b 
		 left join f_member m on b.mem_num = m.mem_num where b.mem_num=#{num} and rn between #{start} and #{end}
	</select>
	
	
	<!-- 자유게시판 댓글 리스트 -->  
	<select id="freeReply" parameterType="map" resultType="boardDTO">
	select * from (select * from f_board_reply where mem_num = #{num})A inner join (select * from f_board inner join f_member on f_board.mem_num = f_member.mem_num) b on b.board_num = A.board_num where b.board_anony_check = 1
	</select>
	
	<!-- 익명게시판 댓글 리스트 -->  
	<select id="secretReply" parameterType="map" resultType="boardDTO">
	select * from (select * from f_board_reply where mem_num = #{num})A inner join f_board b on b.board_num = A.board_num where b.board_anony_check = 0
	</select>
	
	<!-- 중고 게시판 댓글 리스트 -->  
	<select id="shReply" parameterType="map" resultType="boardDTO">
	select * from (select * from f_sh_board_reply where mem_num = #{num})A inner join f_sh_board b on b.board_num = A.board_num
	</select>
	
	<!-- 좋아요  -->
	<select id="memLikeCount" parameterType="int" resultType="int">
 		select count(*) from f_game_like where game_num = #{game_num}
 	</select>
 	
 	<!-- 카카오 회원가입 멤버 넘버 -->
 	<select id="kakaoMemNum" parameterType="int" resultType="int">
		select f_member_seq.nextval from dual 	
	</select>
	
	
	<!-- 회원탈퇴시!!!!! -->
  <insert id="reason" parameterType="DontgoDTO">
 	insert into f_dontgo(reason, nickname, regdate) 
 	values( #{reason}, #{nickname}, sysdate)
 </insert> 
 
  <delete id ="deleteMem" parameterType="String">
 	delete from f_member where mem_id = #{id}
 </delete>
 
 
 <!-- 멤버 별 좋아요 누른 보드게임 목록 -->
	<select id="myPageGameLikeList" parameterType="int" resultType="GameDTO">
		select * from f_game inner join f_game_like on f_game.game_num = f_game_like.game_num where mem_num = #{mem_num}
	</select>
	
	 <!-- 비즈니스 쿠폰 목록 -->
	<select id="myPageCouponList" parameterType="int" resultType="BusinessCouponUserDTO">
		select p.*, b.bp_store_name from (select * from f_business_coupon_user where mem_num = #{mem_num}) p inner join f_business_profile b on p.bp_num = b.bp_num
	</select>
	
	<!-- 삭제할 쿠폰 넘버 찾기!! -->
	 <delete id ="delCoupon" parameterType="int">
 	delete from f_business_coupon_user where bc_num = #{num}
 </delete>
 
 	<!-- 자동삭제 기한에 따라 -->
 	<delete id="expireBcouponUser" parameterType="int">
	 delete from f_business_coupon_user where bc_duedate <![CDATA[<]]> sysdate
	</delete>
	
	
		
	<!-- 보드게임 알람등록 -->
  <insert id="addBoardAlarm" parameterType="AlarmDTO">
 	insert into f_alarm(mem_num, alm_num, alm_cate, alm_title, alm_content, alm_read, alm_regdate) 
 	values(#{mem_num}, f_alarm_seq.nextval, #{alm_cate}, #{alm_title}, #{alm_content}, #{alm_read}, sysdate)
 </insert> 
 
 	<!-- 보드게임 알람리스트 -->
  <select id="boardAlarmList" parameterType="String" resultType="AlarmDTO">
 	select * from f_alarm where mem_num = #{num} 
 </select>
 
 <!-- 댓글번호로 게시글 번호 찾기 -->
   <select id="replyBoardNum" parameterType="int" resultType="int">
 	select board_num from f_board_reply where br_num = #{br_num} 
 </select>
 
 <!-- 글번호로 작성자  번호 찾기 -->
   <select id="BoardNum" parameterType="int" resultType="int">
 	select mem_num from f_board where board_num = #{board_num} 
 </select>
 
 <!-- 글번호로 제목 찾기 -->
   <select id="BoardTitle" parameterType="int" resultType="String">
 	select board_title from f_board where board_num = #{board_num} 
 </select>
 
 <!-- 글번호로 작성자  번호 찾기 -->
   <select id="shBoardNum" parameterType="int" resultType="int">
 	select mem_num from f_sh_board where board_num = #{board_num} 
 </select>
 
 <!-- 글번호로 제목 찾기 -->
   <select id="shBoardTitle" parameterType="int" resultType="String">
 	select board_title from f_sh_board where board_num = #{board_num} 
 </select>
 
 
 <!-- 글번호로 작성자  번호 찾기 -->
   <select id="BoardNumReply" parameterType="int" resultType="int">
 	select mem_num from f_board_reply where br_num = #{br_num} 
 </select>
 
 <!-- 글번호로 제목 찾기 -->
   <select id="BoardTitleReply" parameterType="int" resultType="int">
 	select board_num from f_board_reply where br_num = #{br_num} 
 </select>
 
    <select id="shBoardNumReply" parameterType="int" resultType="int">
 	select mem_num from f_sh_board_reply where br_num = #{br_num} 
 </select>
 
 <!-- 글번호로 제목 찾기 -->
   <select id="shBoardTitleReply" parameterType="int" resultType="int">
 	select board_num from f_sh_board where br_num = #{br_num} 
 </select>
 
 <!-- 번호로 알람 삭제 !! -->
	 <delete id ="delAlarm" parameterType="int">
 	delete from f_alarm where alm_num = #{num}
 </delete>
 
 <!-- 알람 확인누르면 @@ -->
   <update id="readAlarm" parameterType="int">
      update f_alarm set alm_read = 1 where alm_num = #{alm_num}
   </update>
<!-- 닉네임 // 프로필 관련 - 0719 추가 -->
	<insert id="updateNicknameProfile" parameterType="profileDTO">
 		update f_profile set prof_nickname_separated = #{prof_nickname_separated} where mem_num = #{mem_num}
	</insert>
	<!-- profileMapper 내용 -->
	<select id="basicMemberNextNum" resultType="int"> 
 		select f_member_seq.nextval from dual
 	</select>
  <!-- 보드게임 알람리스트 read가 0인 -->
  <select id="boardunReadAlarmList" parameterType="int" resultType="AlarmDTO">
 	select * from f_alarm where mem_num = #{num} and alm_read = 0
 </select>
 
 
	
<!--  
 <select id="listStudent" resultType="studentDTO"> 
 	select * from student 

  </select> 
 
 <insert id="insertStudent" parameterType="studentDTO">
 	insert into student values(#{id}, #{name}, #{cname})
 </insert> 
 
 <delete id ="deleteStudent" parameterType="String">
 	delete from student where id = #{id}
 </delete>
-->

</mapper>

